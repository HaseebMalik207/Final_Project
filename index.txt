#include <iostream>
#include <string>
#include <vector>
using namespace std;
enum class AccountType { CUSTOMER, ADMIN };
class User {
private:
    string username;
    string email;
    string password;
    AccountType accountType;
public:
    User() {}
    User(string username, string email, string password, AccountType accountType) {
        this->username = username;
        this->email = email;
        this->password = password;
        this->accountType = accountType;
    }
    void displayInfo() {
        cout << "Username: " << username << endl;
        cout << "Email: " << email << endl;
        cout << "Account Type: " << (accountType == AccountType::CUSTOMER ? "Customer" : "Admin") << endl;
        // For security reasons, don't display the password
    }
    string getUsername() const {
        return username;
    }
    string getPassword() const {
        return password;
    }
    AccountType getAccountType() const {
        return accountType;
    }
    bool verifyPassword(string inputPassword) const {
        return password == inputPassword;
    }
    void setPassword(string newPassword) {
        password = newPassword;
    }
};
class UserDatabase {
private:
    vector<User> users;
public:
    void registerUser() {
        string username, email, password;
        int accountTypeChoice;
        cout << "Enter username: ";
        cin >> username;
        cout << "Enter email: ";
        cin >> email;
        cout << "Enter password: ";
        cin >> password;
        cout << "Select Account Type:\n1. Customer\n2. Admin\nEnter choice: ";
        cin >> accountTypeChoice;
        AccountType accountType = (accountTypeChoice == 1) ? AccountType::CUSTOMER : AccountType::ADMIN;
        User newUser(username, email, password, accountType);
        users.push_back(newUser);
        cout << "User registered successfully!" << endl;
    }
    User* loginUser(string username, string password) {
        for (auto& user : users) {
            if (user.getUsername() == username && user.verifyPassword(password)) {
                return &user;
            }
        }
        return nullptr; // Return nullptr if user not found or password doesn't match
    }
    void displayAdminDashboard() {
        cout << "Admin Dashboard" << endl;
        cout << "1. Manage Products\n2. Manage Orders\n3. Manage User Accounts\n4. Manage Inventory\n5. Website Settings\n6. Exit\nEnter your choice: ";
        int choice;
        cin >> choice;
        switch (choice) {
            case 1:
                // Add code for managing products
                cout << "Managing Products..." << endl;
                break;
            case 2:
                // Add code for managing orders
                cout << "Managing Orders..." << endl;
                break;
            case 3:
                // Add code for managing user accounts
                cout << "Managing User Accounts..." << endl;
                break;
            case 4:
                // Add code for managing inventory
                cout << "Managing Inventory..." << endl;
                break;
            case 5:
                // Add code for website settings
                cout << "Website Settings..." << endl;
                break;
            case 6:
                cout << "Exiting admin dashboard..." << endl;
                break;
            default:
                cout << "Invalid choice. Please try again." << endl;
        }
    }
    void passwordRecovery(string userEmail) {
        for (auto& user : users) {
            if (user.getEmail() == userEmail) {
                string newPassword;
                cout << "Enter new password: ";
                cin >> newPassword;
                user.setPassword(newPassword);
                cout << "Password updated successfully!" << endl;
                return;
            }
        }
        cout << "User with this email does not exist." << endl;
    }
};
class Laptop {
private:
    string brand;
    string model;
    string specifications;
    double price;
public:
    Laptop(string brand, string model, string specifications, double price) {
        this->brand = brand;
        this->model = model;
        this->specifications = specifications;
        this->price = price;
    }
    void displayInfo() {
        cout << "Brand: " << brand << endl;
        cout << "Model: " << model << endl;
        cout << "Specifications: " << specifications << endl;
        cout << "Price: $" << price << endl;
    }
    double getPrice() const {
        return price;
    }
};
class LaptopCatalog {
private:
    vector<Laptop> laptops;
public:
    void addLaptop(Laptop laptop) {
        laptops.push_back(laptop);
    }
    void displayCatalog() {
        cout << "Laptop Catalog" << endl;
        for (size_t i = 0; i < laptops.size(); ++i) {
            laptops[i].displayInfo();
            cout << endl;
        }
    }
};